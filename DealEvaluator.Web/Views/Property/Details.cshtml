@model DealEvaluator.Web.Models.PropertyDetailsViewModel

@{
    ViewData["Title"] = "Property Details";
}

<div class="container">
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-controller="Property" asp-action="Index">My Properties</a></li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Property.Address</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <!-- Property Details with Integrated Map -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-body p-4">
                    <div class="d-flex justify-content-between align-items-start mb-4">
                        <div>
                            <h2 class="fw-bold mb-1">@Model.Property.Address</h2>
                            <p class="text-muted mb-0">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-geo-alt me-1" viewBox="0 0 16 16" style="vertical-align: text-bottom;">
                                    <path d="M12.166 8.94c-.524 1.062-1.234 2.12-1.96 3.07A32 32 0 0 1 8 14.58a32 32 0 0 1-2.206-2.57c-.726-.95-1.436-2.008-1.96-3.07C3.304 7.867 3 6.862 3 6a5 5 0 0 1 10 0c0 .862-.305 1.867-.834 2.94M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10"/>
                                    <path d="M8 8a2 2 0 1 1 0-4 2 2 0 0 1 0 4m0 1a3 3 0 1 0 0-6 3 3 0 0 0 0 6"/>
                                </svg>
                                @Model.Property.City, @Model.Property.State @Model.Property.ZipCode
                            </p>
                        </div>
                        <div class="d-flex flex-column align-items-end">
                            <div class="badge bg-primary fs-6 mb-2">@Model.Property.PropertyType</div>
                            <div class="text-muted small">@Model.Property.CreatedAt.ToString("MMM d, yyyy h:mm tt")</div>
                        </div>
                    </div>

                    <!-- Property Location Map -->
                    <div id="property-location-map" style="height: 350px; width: 100%; border-radius: 8px; margin-top: 20px;"></div>

                    <hr class="my-4">

                    <div class="row g-4">
                        @if (Model.Property.Price.HasValue)
                        {
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <div class="feature-icon bg-primary bg-opacity-10 text-primary rounded-circle p-3 me-3">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-currency-dollar" viewBox="0 0 16 16">
                                            <path d="M4 10.781c.148 1.667 1.513 2.85 3.591 3.003V15h1.043v-1.216c2.27-.179 3.678-1.438 3.678-3.3 0-1.59-.947-2.51-2.956-3.028l-.722-.187V3.467c1.122.11 1.879.714 2.07 1.616h1.47c-.166-1.6-1.54-2.748-3.54-2.875V1H7.591v1.233c-1.939.23-3.27 1.472-3.27 3.156 0 1.454.966 2.483 2.661 2.917l.61.162v4.031c-1.149-.17-1.94-.8-2.131-1.718zm3.391-3.836c-1.043-.263-1.6-.825-1.6-1.616 0-.944.704-1.641 1.8-1.828v3.495l-.2-.05zm1.591 1.872c1.287.323 1.852.859 1.852 1.769 0 1.097-.826 1.828-2.2 1.939V8.73z"/>
                                        </svg>
                                    </div>
                                    <div>
                                        <div class="text-muted small">Purchase Price</div>
                                        <div class="fs-4 fw-bold">$@Model.Property.Price.Value.ToString("N0")</div>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (Model.Property.Sqft.HasValue)
                        {
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <div class="feature-icon bg-success bg-opacity-10 text-success rounded-circle p-3 me-3">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-rulers" viewBox="0 0 16 16">
                                            <path d="M1 0a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h5v-1H1V1h5V0zm9 0h5a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1h-5v-1h5V1h-5z"/>
                                            <path d="M2 1.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5z"/>
                                        </svg>
                                    </div>
                                    <div>
                                        <div class="text-muted small">Square Footage</div>
                                        <div class="fs-4 fw-bold">@Model.Property.Sqft.Value.ToString("N0") sq ft</div>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (Model.Property.Bedrooms.HasValue || Model.Property.Bathrooms.HasValue)
                        {
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <div class="feature-icon bg-info bg-opacity-10 text-info rounded-circle p-3 me-3">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-door-open" viewBox="0 0 16 16">
                                            <path d="M8.5 10c-.276 0-.5-.448-.5-1s.224-1 .5-1 .5.448.5 1-.224 1-.5 1"/>
                                            <path d="M10.828.122A.5.5 0 0 1 11 .5V1h.5A1.5 1.5 0 0 1 13 2.5V15h1.5a.5.5 0 0 1 0 1h-13a.5.5 0 0 1 0-1H3V1.5a.5.5 0 0 1 .43-.495l7-1a.5.5 0 0 1 .398.117M11.5 2H11v13h1V2.5a.5.5 0 0 0-.5-.5M4 1.934V15h6V1.077z"/>
                                        </svg>
                                    </div>
                                    <div>
                                        <div class="text-muted small">Bedrooms / Bathrooms</div>
                                        <div class="fs-4 fw-bold">@Model.Property.Bedrooms BD / @Model.Property.Bathrooms BA</div>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (Model.Property.YearBuilt.HasValue)
                        {
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <div class="feature-icon bg-warning bg-opacity-10 text-warning rounded-circle p-3 me-3">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-calendar-event" viewBox="0 0 16 16">
                                            <path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5z"/>
                                            <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5M1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z"/>
                                        </svg>
                                    </div>
                                    <div>
                                        <div class="text-muted small">Year Built</div>
                                        <div class="fs-4 fw-bold">@Model.Property.YearBuilt</div>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <div class="feature-icon bg-secondary bg-opacity-10 text-secondary rounded-circle p-3 me-3">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-tools" viewBox="0 0 16 16">
                                        <path d="M1 0 0 1l2.2 3.081a1 1 0 0 0 .815.419h.07a1 1 0 0 1 .708.293l2.675 2.675-2.617 2.654A3.003 3.003 0 0 0 0 13a3 3 0 1 0 5.878-.851l2.654-2.617.968.968-.305.914a1 1 0 0 0 .242 1.023l3.27 3.27a.997.997 0 0 0 1.414 0l1.586-1.586a.997.997 0 0 0 0-1.414l-3.27-3.27a1 1 0 0 0-1.023-.242L10.5 9.5l-.96-.96 2.68-2.643A3.005 3.005 0 0 0 16 3q0-.405-.102-.777l-2.14 2.141L12 4l-.364-1.757L13.777.102a3 3 0 0 0-3.675 3.68L7.462 6.46 4.793 3.793a1 1 0 0 1-.293-.707v-.071a1 1 0 0 0-.419-.814zm9.646 10.646a.5.5 0 0 1 .708 0l2.914 2.915a.5.5 0 0 1-.707.707l-2.915-2.914a.5.5 0 0 1 0-.708M3 11l.471.242.529.026.287.445.445.287.026.529L5 13l-.242.471-.026.529-.445.287-.287.445-.529.026L3 15l-.471-.242L2 14.732l-.287-.445L1.268 14l-.026-.529L1 13l.242-.471.026-.529.445-.287.287-.445.529-.026z"/>
                                    </svg>
                                </div>
                                <div>
                                    <div class="text-muted small">Condition</div>
                                    <div class="fs-4 fw-bold">@Model.Property.PropertyConditions</div>
                                </div>
                            </div>
                        </div>

                        @if (Model.Property.LotSizeSqft.HasValue)
                        {
                            <div class="col-md-6">
                                <div class="d-flex align-items-center">
                                    <div class="feature-icon bg-danger bg-opacity-10 text-danger rounded-circle p-3 me-3">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-pip" viewBox="0 0 16 16">
                                            <path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5zM1.5 3a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5z"/>
                                            <path d="M8 8.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5z"/>
                                        </svg>
                                    </div>
                                    <div>
                                        <div class="text-muted small">Lot Size</div>
                                        <div class="fs-4 fw-bold">@Model.Property.LotSizeSqft.Value.ToString("N0") sq ft</div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Evaluation Results -->
            @if (Model.LatestEvaluation != null)
            {
                <div class="card shadow-sm border-0 mb-4" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                    <div class="card-header border-0" style="background: transparent;">
                        <div class="d-flex justify-content-between align-items-center">
                            <h4 class="mb-0 fw-bold text-white">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-graph-up me-2" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M0 0h1v15h15v1H0zm14.817 3.113a.5.5 0 0 1 .07.704l-4.5 5.5a.5.5 0 0 1-.74.037L7.06 6.767l-3.656 5.027a.5.5 0 0 1-.808-.588l4-5.5a.5.5 0 0 1 .758-.06l2.609 2.61 4.15-5.073a.5.5 0 0 1 .704-.07"/>
                                </svg>
                                Deal Analysis
                            </h4>
                            <div class="d-flex align-items-center gap-3">
                                <small class="text-white opacity-75">@Model.LatestEvaluation.CreatedAt.ToString("MMM d, yyyy h:mm tt")</small>
                                @if (Model.EvaluationHistory.Any())
                                {
                                    <button class="btn btn-sm btn-light" type="button" data-bs-toggle="modal" data-bs-target="#evaluationHistoryModal">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-clock-history me-1" viewBox="0 0 16 16">
                                            <path d="M8.515 1.019A7 7 0 0 0 8 1V0a8 8 0 0 1 .589.022zm2.004.45a7 7 0 0 0-.985-.299l.219-.976q.576.129 1.126.342zm1.37.71a7 7 0 0 0-.439-.27l.493-.87a8 8 0 0 1 .979.654l-.615.789a7 7 0 0 0-.418-.302zm1.834 1.79a7 7 0 0 0-.653-.796l.724-.69q.406.429.747.91zm.744 1.352a7 7 0 0 0-.214-.468l.893-.45a8 8 0 0 1 .45 1.088l-.95.313a7 7 0 0 0-.179-.483m.53 2.507a7 7 0 0 0-.1-1.025l.985-.17q.1.58.116 1.17zm-.131 1.538q.05-.254.081-.51l.993.123a8 8 0 0 1-.23 1.155l-.964-.267q.069-.247.12-.501m-.952 2.379q.276-.436.486-.908l.914.405q-.24.54-.555 1.038zm-.964 1.205q.183-.183.35-.378l.758.653a8 8 0 0 1-.401.432z"/>
                                            <path d="M8 1a7 7 0 1 0 4.95 11.95l.707.707A8.001 8.001 0 1 1 8 0z"/>
                                            <path d="M7.5 3a.5.5 0 0 1 .5.5v5.21l3.248 1.856a.5.5 0 0 1-.496.868l-3.5-2A.5.5 0 0 1 7 9V3.5a.5.5 0 0 1 .5-.5"/>
                                        </svg>
                                        View History
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-4" style="background: rgba(255, 255, 255, 0.95); border-radius: 0 0 0.375rem 0.375rem; color: #212529;">
                        <div class="row g-4">
                            @if (Model.LatestEvaluation.Arv.HasValue)
                            {
                                <div class="col-md-6">
                                    <div class="d-flex align-items-center">
                                        <div class="feature-icon bg-success bg-opacity-10 text-success rounded-circle p-3 me-3">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-house-check" viewBox="0 0 16 16">
                                                <path d="M7.293 1.5a1 1 0 0 1 1.414 0L11 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l2.354 2.353a.5.5 0 0 1-.708.708L8 2.207l-5.646 5.647a.5.5 0 0 1-.708-.708z"/>
                                                <path d="m8 3.293 6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293z"/>
                                                <path d="M10.854 7.854a.5.5 0 0 0-.708-.708L7.5 9.793 6.354 8.646a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0z"/>
                                            </svg>
                                        </div>
                                        <div>
                                            <div class="text-muted small">After Repair Value (ARV)</div>
                                            <div class="fs-4 fw-bold">$@Model.LatestEvaluation.Arv.Value.ToString("N0")</div>
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (Model.LatestEvaluation.RepairCost.HasValue)
                            {
                                <div class="col-md-6">
                                    <div class="d-flex align-items-center">
                                        <div class="feature-icon bg-warning bg-opacity-10 text-warning rounded-circle p-3 me-3">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-tools" viewBox="0 0 16 16">
                                                <path d="M1 0 0 1l2.2 3.081a1 1 0 0 0 .815.419h.07a1 1 0 0 1 .708.293l2.675 2.675-2.617 2.654A3.003 3.003 0 0 0 0 13a3 3 0 1 0 5.878-.851l2.654-2.617.968.968-.305.914a1 1 0 0 0 .242 1.023l3.27 3.27a.997.997 0 0 0 1.414 0l1.586-1.586a.997.997 0 0 0 0-1.414l-3.27-3.27a1 1 0 0 0-1.023-.242L10.5 9.5l-.96-.96 2.68-2.643A3.005 3.005 0 0 0 16 3q0-.405-.102-.777l-2.14 2.141L12 4l-.364-1.757L13.777.102a3 3 0 0 0-3.675 3.68L7.462 6.46 4.793 3.793a1 1 0 0 1-.293-.707v-.071a1 1 0 0 0-.419-.814zm9.646 10.646a.5.5 0 0 1 .708 0l2.914 2.915a.5.5 0 0 1-.707.707l-2.915-2.914a.5.5 0 0 1 0-.708M3 11l.471.242.529.026.287.445.445.287.026.529L5 13l-.242.471-.026.529-.445.287-.287.445-.529.026L3 15l-.471-.242L2 14.732l-.287-.445L1.268 14l-.026-.529L1 13l.242-.471.026-.529.445-.287.287-.445.529-.026z"/>
                                            </svg>
                                        </div>
                                        <div>
                                            <div class="text-muted small">Repair Cost</div>
                                            <div class="fs-4 fw-bold">$@Model.LatestEvaluation.RepairCost.Value.ToString("N0")</div>
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (Model.LatestEvaluation.PurchasePrice.HasValue)
                            {
                                <div class="col-md-6">
                                    <div class="d-flex align-items-center">
                                        <div class="feature-icon bg-primary bg-opacity-10 text-primary rounded-circle p-3 me-3">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-currency-dollar" viewBox="0 0 16 16">
                                                <path d="M4 10.781c.148 1.667 1.513 2.85 3.591 3.003V15h1.043v-1.216c2.27-.179 3.678-1.438 3.678-3.3 0-1.59-.947-2.51-2.956-3.028l-.722-.187V3.467c1.122.11 1.879.714 2.07 1.616h1.47c-.166-1.6-1.54-2.748-3.54-2.875V1H7.591v1.233c-1.939.23-3.27 1.472-3.27 3.156 0 1.454.966 2.483 2.661 2.917l.61.162v4.031c-1.149-.17-1.94-.8-2.131-1.718zm3.391-3.836c-1.043-.263-1.6-.825-1.6-1.616 0-.944.704-1.641 1.8-1.828v3.495l-.2-.05zm1.591 1.872c1.287.323 1.852.859 1.852 1.769 0 1.097-.826 1.828-2.2 1.939V8.73z"/>
                                            </svg>
                                        </div>
                                        <div>
                                            <div class="text-muted small">Purchase Price</div>
                                            <div class="fs-4 fw-bold">$@Model.LatestEvaluation.PurchasePrice.Value.ToString("N0")</div>
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (Model.LatestEvaluation.RentalIncome.HasValue)
                            {
                                <div class="col-md-6">
                                    <div class="d-flex align-items-center">
                                        <div class="feature-icon bg-info bg-opacity-10 text-info rounded-circle p-3 me-3">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-cash-coin" viewBox="0 0 16 16">
                                                <path fill-rule="evenodd" d="M11 15a4 4 0 1 0 0-8 4 4 0 0 0 0 8m5-4a5 5 0 1 1-10 0 5 5 0 0 1 10 0"/>
                                                <path d="M9.438 11.944c.047.596.518 1.06 1.363 1.116v.44h.375v-.443c.875-.061 1.386-.529 1.386-1.207 0-.618-.39-.936-1.09-1.1l-.296-.07v-1.2c.376.043.614.248.671.532h.658c-.047-.575-.54-1.024-1.329-1.073V8.5h-.375v.45c-.747.073-1.255.522-1.255 1.158 0 .562.378.92 1.007 1.066l.248.061v1.272c-.384-.058-.639-.27-.696-.563h-.668zm1.36-1.354c-.369-.085-.569-.26-.569-.522 0-.294.216-.514.572-.578v1.1zm.432.746c.449.104.655.272.655.569 0 .339-.257.571-.709.614v-1.195z"/>
                                                <path d="M1 0a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h4.083q.088-.517.258-1H3a2 2 0 0 0-2-2V3a2 2 0 0 0 2-2h10a2 2 0 0 0 2 2v3.528c.38.34.717.728 1 1.154V1a1 1 0 0 0-1-1z"/>
                                                <path d="M9.998 5.083 10 5a2 2 0 1 0-3.132 1.65 6 6 0 0 1 3.13-1.567"/>
                                            </svg>
                                        </div>
                                        <div>
                                            <div class="text-muted small">Monthly Rental Income</div>
                                            <div class="fs-4 fw-bold">$@Model.LatestEvaluation.RentalIncome.Value.ToString("N0")</div>
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (Model.LatestEvaluation.CapRate.HasValue)
                            {
                                <div class="col-md-6">
                                    <div class="d-flex align-items-center">
                                        <div class="feature-icon bg-danger bg-opacity-10 text-danger rounded-circle p-3 me-3">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-percent" viewBox="0 0 16 16">
                                                <path d="M13.442 2.558a.625.625 0 0 1 0 .884l-10 10a.625.625 0 1 1-.884-.884l10-10a.625.625 0 0 1 .884 0M4.5 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m0 1a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5m7 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m0 1a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5"/>
                                            </svg>
                                        </div>
                                        <div>
                                            <div class="text-muted small">Cap Rate</div>
                                            <div class="fs-4 fw-bold">@Model.LatestEvaluation.CapRate%</div>
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (Model.LatestEvaluation.CashOnCash.HasValue)
                            {
                                <div class="col-md-6">
                                    <div class="d-flex align-items-center">
                                        <div class="feature-icon bg-secondary bg-opacity-10 text-secondary rounded-circle p-3 me-3">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-calculator" viewBox="0 0 16 16">
                                                <path d="M12 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"/>
                                                <path d="M4 2.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5zm0 4a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm3-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm3-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5z"/>
                                            </svg>
                                        </div>
                                        <div>
                                            <div class="text-muted small">Cash-on-Cash Return</div>
                                            <div class="fs-4 fw-bold">@Model.LatestEvaluation.CashOnCash%</div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Visual connector to comparables section -->
                    <div class="text-center py-3" style="background: rgba(255, 255, 255, 0.95); color: #212529;">
                        <small class="text-muted d-flex align-items-center justify-content-center">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down me-2" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1"/>
                            </svg>
                            Based on comparable properties below
                        </small>
                    </div>
                </div>
            }
            else
            {
                <!-- No Evaluation Yet -->
                <div class="card shadow-sm border-0">
                    <div class="card-body p-4 text-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-graph-up text-muted mb-3" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M0 0h1v15h15v1H0zm14.817 3.113a.5.5 0 0 1 .07.704l-4.5 5.5a.5.5 0 0 1-.74.037L7.06 6.767l-3.656 5.027a.5.5 0 0 1-.808-.588l4-5.5a.5.5 0 0 1 .758-.06l2.609 2.61 4.15-5.073a.5.5 0 0 1 .704-.07"/>
                        </svg>
                        <h4 class="mb-2">No Evaluation Yet</h4>
                        <p class="text-muted mb-0">Click "Re-Evaluate Property" to generate the first evaluation for this property.</p>
                    </div>
                </div>
            }

            <!-- Comparables Section -->
            <div class="card shadow-sm border-0 mt-4">
                <div class="card-header bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="mb-0 fw-bold">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-houses me-2" viewBox="0 0 16 16">
                                <path d="M5.793 1a1 1 0 0 1 1.414 0l.647.646a.5.5 0 1 1-.708.708L6.5 1.707 2 6.207V12.5a.5.5 0 0 0 .5.5.5.5 0 0 1 0 1A1.5 1.5 0 0 1 1 12.5V7.207l-.146.147a.5.5 0 0 1-.708-.708zm3 1a1 1 0 0 1 1.414 0L12 3.793V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v3.293l1.854 1.853a.5.5 0 0 1-.708.708L15 8.207V13.5a1.5 1.5 0 0 1-1.5 1.5h-8A1.5 1.5 0 0 1 4 13.5V8.207l-.146.147a.5.5 0 1 1-.708-.708zm.707.707L5 7.207V13.5a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5V7.207z"/>
                            </svg>
                            Comparable Properties
                            <span class="badge bg-primary ms-2">@Model.Comparables.Count</span>
                        </h4>
                        <div>
                            <button class="btn btn-sm btn-primary me-2" type="button" data-bs-toggle="modal" data-bs-target="#addComparableModal">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle me-1" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
                                </svg>
                                Add Comparable
                            </button>
                            <button class="btn btn-sm btn-success" type="button" onclick="alert('Refresh comparables feature coming soon!')">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise me-1" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z"/>
                                    <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466"/>
                                </svg>
                                Refresh Comps
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    @if (Model.Comparables.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Address</th>
                                        <th>Price</th>
                                        <th>Sqft</th>
                                        <th>Bed/Bath</th>
                                        <th>Sale Date</th>
                                        <th>Status</th>
                                        <th>Source</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var comp in Model.Comparables)
                                    {
                                        <tr>
                                            <td>
                                                <div class="fw-bold">@comp.Address</div>
                                                <small class="text-muted">@comp.City, @comp.State @comp.ZipCode</small>
                                            </td>
                                            <td>
                                                @if (comp.Price.HasValue)
                                                {
                                                    <span class="fw-bold text-success">$@comp.Price.Value.ToString("N0")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">N/A</span>
                                                }
                                            </td>
                                            <td>
                                                @if (comp.Sqft.HasValue)
                                                {
                                                    <span>@comp.Sqft.Value.ToString("N0") sf</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">N/A</span>
                                                }
                                            </td>
                                            <td>
                                                @if (comp.Bedrooms.HasValue || comp.Bathrooms.HasValue)
                                                {
                                                    <span>@comp.Bedrooms / @comp.Bathrooms</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">N/A</span>
                                                }
                                            </td>
                                            <td>
                                                @if (comp.SaleDate.HasValue)
                                                {
                                                    <span>@comp.SaleDate.Value.ToString("MMM d, yyyy")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">N/A</span>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge
                                                    @(comp.ListingStatus.ToString() == "Sold" ? "bg-success" :
                                                      comp.ListingStatus.ToString() == "ForSale" ? "bg-primary" :
                                                      comp.ListingStatus.ToString() == "Pending" ? "bg-warning" : "bg-secondary")">
                                                    @comp.ListingStatus
                                                </span>
                                            </td>
                                            <td>
                                                <small class="text-muted">@comp.Source</small>
                                            </td>
                                            <td>
                                                <form asp-controller="Property"
                                                      asp-action="DeleteComparable"
                                                      asp-route-comparableId="@comp.Id"
                                                      asp-route-propertyId="@Model.Property.Id"
                                                      method="post"
                                                      onsubmit="return confirm('Are you sure you want to remove this comparable?');"
                                                      style="display: inline;">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-sm btn-outline-danger">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                                                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                                                        </svg>
                                                    </button>
                                                </form>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="p-5 text-center">
                            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-house-slash text-muted mb-3" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M1.146 1.146a.5.5 0 0 0 0 .708l13 13a.5.5 0 0 0 .708-.708l-13-13a.5.5 0 0 0-.708 0M8 2.5 13.5 8V13h-3v-2a.5.5 0 0 0-.5-.5H6a.5.5 0 0 0-.5.5v2h-3V8.207l.854-.853L1.5 5.5v7a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5V8.5l-6-6z"/>
                            </svg>
                            <h5 class="mb-2">No Comparables Yet</h5>
                            <p class="text-muted mb-3">
                                Click "Add Comparable" to select properties from the map, or "Refresh Comps" to fetch from Zillow.
                            </p>
                            <button class="btn btn-primary" type="button" data-bs-toggle="modal" data-bs-target="#addComparableModal">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search me-1" viewBox="0 0 16 16">
                                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"/>
                                </svg>
                                Find Comparables
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Action Sidebar -->
        <div class="col-lg-4">
            <!-- Actions Card -->
            <div class="card shadow-sm border-0 mb-3">
                <div class="card-header bg-light">
                    <h5 class="mb-0 fw-bold">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-lightning-charge me-2" viewBox="0 0 16 16">
                            <path d="M11.251.068a.5.5 0 0 1 .227.58L9.677 6.5H13a.5.5 0 0 1 .364.843l-8 8.5a.5.5 0 0 1-.842-.49L6.323 9.5H3a.5.5 0 0 1-.364-.843l8-8.5a.5.5 0 0 1 .615-.09M4.157 8.5H7a.5.5 0 0 1 .478.647L6.11 13.59l5.732-6.09H9a.5.5 0 0 1-.478-.647L9.89 2.41z"/>
                        </svg>
                        Quick Actions
                    </h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a asp-controller="Property" asp-action="Edit" asp-route-id="@Model.Property.Id" class="btn btn-primary btn-lg">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-pencil-square me-2" viewBox="0 0 16 16">
                                <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                                <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"/>
                            </svg>
                            Edit Property
                        </a>

                        <form asp-controller="Property" asp-action="Evaluate" asp-route-id="@Model.Property.Id" method="post" class="mb-0">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-success btn-lg w-100">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-calculator me-2" viewBox="0 0 16 16">
                                    <path d="M12 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"/>
                                    <path d="M4 2.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5zm0 4a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm3-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm3-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5zm0 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5z"/>
                                </svg>
                                Re-Evaluate Property
                            </button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Navigation Card -->
            <div class="card shadow-sm border-0">
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a asp-controller="Property" asp-action="Index" class="btn btn-outline-secondary">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left me-2" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8"/>
                            </svg>
                            Back to Properties
                        </a>
                        <form asp-controller="Property" asp-action="Delete" asp-route-id="@Model.Property.Id" method="post" onsubmit="return confirm('Are you sure you want to delete this property? This action cannot be undone.');">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-outline-danger w-100">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash me-2" viewBox="0 0 16 16">
                                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                                    <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                                </svg>
                                Delete Property
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Comparable Modal -->
<div class="modal fade" id="addComparableModal" tabindex="-1" aria-labelledby="addComparableModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addComparableModalLabel">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-geo-alt me-2" viewBox="0 0 16 16">
                        <path d="M12.166 8.94c-.524 1.062-1.234 2.12-1.96 3.07A32 32 0 0 1 8 14.58a32 32 0 0 1-2.206-2.57c-.726-.95-1.436-2.008-1.96-3.07C3.304 7.867 3 6.862 3 6a5 5 0 0 1 10 0c0 .862-.305 1.867-.834 2.94M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10"/>
                        <path d="M8 8a2 2 0 1 1 0-4 2 2 0 0 1 0 4m0 1a3 3 0 1 0 0-6 3 3 0 0 0 0 6"/>
                    </svg>
                    Select Comparable Properties - @Model.Property.ZipCode
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0">
                <div id="loading-indicator" class="text-center p-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3">Loading market data for zip code @Model.Property.ZipCode...</p>
                </div>
                <div id="map-container" style="display: none;">
                    <div id="comparable-map" style="height: 600px; width: 100%;"></div>
                </div>
                <div id="error-message" class="alert alert-danger m-3" style="display: none;" role="alert"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Evaluation History Modal -->
<div class="modal fade" id="evaluationHistoryModal" tabindex="-1" aria-labelledby="evaluationHistoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                <h5 class="modal-title fw-bold" id="evaluationHistoryModalLabel">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-clock-history me-2" viewBox="0 0 16 16">
                        <path d="M8.515 1.019A7 7 0 0 0 8 1V0a8 8 0 0 1 .589.022zm2.004.45a7 7 0 0 0-.985-.299l.219-.976q.576.129 1.126.342zm1.37.71a7 7 0 0 0-.439-.27l.493-.87a8 8 0 0 1 .979.654l-.615.789a7 7 0 0 0-.418-.302zm1.834 1.79a7 7 0 0 0-.653-.796l.724-.69q.406.429.747.91zm.744 1.352a7 7 0 0 0-.214-.468l.893-.45a8 8 0 0 1 .45 1.088l-.95.313a7 7 0 0 0-.179-.483m.53 2.507a7 7 0 0 0-.1-1.025l.985-.17q.1.58.116 1.17zm-.131 1.538q.05-.254.081-.51l.993.123a8 8 0 0 1-.23 1.155l-.964-.267q.069-.247.12-.501m-.952 2.379q.276-.436.486-.908l.914.405q-.24.54-.555 1.038zm-.964 1.205q.183-.183.35-.378l.758.653a8 8 0 0 1-.401.432z"/>
                        <path d="M8 1a7 7 0 1 0 4.95 11.95l.707.707A8.001 8.001 0 1 1 8 0z"/>
                        <path d="M7.5 3a.5.5 0 0 1 .5.5v5.21l3.248 1.856a.5.5 0 0 1-.496.868l-3.5-2A.5.5 0 0 1 7 9V3.5a.5.5 0 0 1 .5-.5"/>
                    </svg>
                    Evaluation History
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0">
                @if (Model.EvaluationHistory.Any())
                {
                    <div class="list-group list-group-flush">
                        @foreach (var evaluation in Model.EvaluationHistory)
                        {
                            <div class="list-group-item">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <div>
                                        <h6 class="mb-1 fw-bold">@evaluation.CreatedAt.ToString("MMMM d, yyyy")</h6>
                                        <small class="text-muted">@evaluation.CreatedAt.ToString("h:mm tt")</small>
                                    </div>
                                    <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#modal-eval-@evaluation.Id">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-eye me-1" viewBox="0 0 16 16">
                                            <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8M1.173 8a13 13 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5s3.879 1.168 5.168 2.457A13 13 0 0 1 14.828 8q-.086.13-.195.288c-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5s-3.879-1.168-5.168-2.457A13 13 0 0 1 1.172 8z"/>
                                            <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5M4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0"/>
                                        </svg>
                                        View Details
                                    </button>
                                </div>

                                <!-- Summary stats -->
                                <div class="d-flex gap-3 mb-2 flex-wrap">
                                    @if (evaluation.Arv.HasValue)
                                    {
                                        <span class="badge bg-success">ARV: $@evaluation.Arv.Value.ToString("N0")</span>
                                    }
                                    @if (evaluation.CapRate.HasValue)
                                    {
                                        <span class="badge bg-info">Cap Rate: @evaluation.CapRate%</span>
                                    }
                                    @if (evaluation.CashOnCash.HasValue)
                                    {
                                        <span class="badge bg-warning text-dark">CoC: @evaluation.CashOnCash%</span>
                                    }
                                </div>

                                <!-- Collapsible details -->
                                <div class="collapse mt-3" id="modal-eval-@evaluation.Id">
                                    <div class="card card-body bg-light">
                                        <div class="row g-3">
                                            @if (evaluation.Arv.HasValue)
                                            {
                                                <div class="col-md-6">
                                                    <small class="text-muted d-block">After Repair Value (ARV)</small>
                                                    <strong>$@evaluation.Arv.Value.ToString("N0")</strong>
                                                </div>
                                            }
                                            @if (evaluation.RepairCost.HasValue)
                                            {
                                                <div class="col-md-6">
                                                    <small class="text-muted d-block">Repair Cost</small>
                                                    <strong>$@evaluation.RepairCost.Value.ToString("N0")</strong>
                                                </div>
                                            }
                                            @if (evaluation.PurchasePrice.HasValue)
                                            {
                                                <div class="col-md-6">
                                                    <small class="text-muted d-block">Purchase Price</small>
                                                    <strong>$@evaluation.PurchasePrice.Value.ToString("N0")</strong>
                                                </div>
                                            }
                                            @if (evaluation.RentalIncome.HasValue)
                                            {
                                                <div class="col-md-6">
                                                    <small class="text-muted d-block">Monthly Rental Income</small>
                                                    <strong>$@evaluation.RentalIncome.Value.ToString("N0")</strong>
                                                </div>
                                            }
                                            @if (evaluation.CapRate.HasValue)
                                            {
                                                <div class="col-md-6">
                                                    <small class="text-muted d-block">Cap Rate</small>
                                                    <strong>@evaluation.CapRate%</strong>
                                                </div>
                                            }
                                            @if (evaluation.CashOnCash.HasValue)
                                            {
                                                <div class="col-md-6">
                                                    <small class="text-muted d-block">Cash-on-Cash Return</small>
                                                    <strong>@evaluation.CashOnCash%</strong>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="p-5 text-center text-muted">
                        <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="currentColor" class="bi bi-inbox mb-3" viewBox="0 0 16 16">
                            <path d="M4.98 4a.5.5 0 0 0-.39.188L1.54 8H6a.5.5 0 0 1 .5.5 1.5 1.5 0 1 0 3 0A.5.5 0 0 1 10 8h4.46l-3.05-3.812A.5.5 0 0 0 11.02 4zm9.954 5H10.45a2.5 2.5 0 0 1-4.9 0H1.066l.32 2.562a.5.5 0 0 0 .497.438h12.234a.5.5 0 0 0 .496-.438zM3.809 3.563A1.5 1.5 0 0 1 4.981 3h6.038a1.5 1.5 0 0 1 1.172.563l3.7 4.625a.5.5 0 0 1 .105.374l-.39 3.124A1.5 1.5 0 0 1 14.117 13H1.883a1.5 1.5 0 0 1-1.489-1.314l-.39-3.124a.5.5 0 0 1 .106-.374z"/>
                        </svg>
                        <p class="mb-0">No previous evaluations found.</p>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .feature-icon {
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
    </style>
}

@section Scripts {
    <script>
        let comparableMap = null;
        let propertyLocationMap = null;
        const propertyId = @Model.Property.Id;
        const zipCode = '@Model.Property.ZipCode';

        // Main property details
        const mainProperty = {
            address: '@Model.Property.Address',
            city: '@Model.Property.City',
            state: '@Model.Property.State',
            price: @(Model.Property.Price?.ToString() ?? "null"),
            sqft: @(Model.Property.Sqft?.ToString() ?? "null"),
            bedrooms: @(Model.Property.Bedrooms?.ToString() ?? "null"),
            bathrooms: @(Model.Property.Bathrooms?.ToString() ?? "null"),
            latitude: @(Model.Property.Latitude?.ToString() ?? "null"),
            longitude: @(Model.Property.Longitude?.ToString() ?? "null")
        };

        // Initialize property location map on page load
        document.addEventListener('DOMContentLoaded', function() {
            initializePropertyLocationMap();
        });

        // Initialize modal and map when modal is shown
        document.getElementById('addComparableModal').addEventListener('shown.bs.modal', function() {
            loadMarketData();
        });

        // Clean up map when modal is hidden
        document.getElementById('addComparableModal').addEventListener('hidden.bs.modal', function() {
            if (comparableMap) {
                comparableMap.remove();
                comparableMap = null;
            }
        });

        async function loadMarketData() {
            // Show loading, hide error and map
            document.getElementById('loading-indicator').style.display = 'block';
            document.getElementById('map-container').style.display = 'none';
            document.getElementById('error-message').style.display = 'none';

            try {
                const response = await fetch(`/Property/GetMarketData?zipCode=${zipCode}`);
                const data = await response.json();

                if (data.success && data.properties && data.properties.length > 0) {
                    initializeMap(data.properties);
                } else {
                    showError('No market data found for zip code ' + zipCode);
                }
            } catch (error) {
                console.error('Error fetching market data:', error);
                showError('Failed to load market data. Please try again.');
            } finally {
                document.getElementById('loading-indicator').style.display = 'none';
            }
        }

        async function initializeMap(properties) {
            // Show map container
            document.getElementById('map-container').style.display = 'block';

            // Calculate center point from properties with coordinates
            const propsWithCoords = properties.filter(p => p.latitude && p.longitude);

            if (propsWithCoords.length === 0) {
                showError('No properties with valid coordinates found.');
                return;
            }

            const avgLat = propsWithCoords.reduce((sum, p) => sum + p.latitude, 0) / propsWithCoords.length;
            const avgLng = propsWithCoords.reduce((sum, p) => sum + p.longitude, 0) / propsWithCoords.length;

            // Initialize map
            comparableMap = L.map('comparable-map').setView([avgLat, avgLng], 15);

            // Add CartoDB Positron tiles
            L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
                maxZoom: 19
            }).addTo(comparableMap);

            // Add the main property marker (red pin)
            await addMainPropertyMarker();

            // Add markers for each comparable property (blue pins)
            propsWithCoords.forEach(prop => {
                addPropertyMarker(prop);
            });

            console.log(`Map initialized with ${propsWithCoords.length} comparable properties`);
        }

        async function addMainPropertyMarker() {
            try {
                let lat, lng;

                // Check if we already have coordinates stored
                if (mainProperty.latitude && mainProperty.longitude) {
                    lat = mainProperty.latitude;
                    lng = mainProperty.longitude;
                    console.log('Using stored coordinates for main property');
                } else {
                    // Geocode the address using Nominatim (OpenStreetMap's free geocoding service)
                    const fullAddress = `${mainProperty.address}, ${mainProperty.city}, ${mainProperty.state}`;
                    console.log('Geocoding main property address:', fullAddress);

                    const geocodeUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(fullAddress)}`;
                    const response = await fetch(geocodeUrl, {
                        headers: {
                            'User-Agent': 'DealEvaluator/1.0' // Nominatim requires a user agent
                        }
                    });

                    const results = await response.json();
                    if (results && results.length > 0) {
                        lat = parseFloat(results[0].lat);
                        lng = parseFloat(results[0].lon);
                        console.log('Geocoded main property to:', lat, lng);

                        // Save coordinates to database for future use
                        await saveCoordinatesToDatabase(lat, lng);
                    } else {
                        console.warn('Could not geocode main property address');
                        return; // Skip adding marker if geocoding fails
                    }
                }

                // Create custom red icon for main property
                const redIcon = L.icon({
                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    shadowSize: [41, 41]
                });

                // Add marker for main property
                const marker = L.marker([lat, lng], { icon: redIcon }).addTo(comparableMap);

                // Create popup content for main property
                const popupContent = `
                    <div style="min-width: 250px;">
                        <h6 class="fw-bold mb-2 text-danger">📍 YOUR PROPERTY</h6>
                        <div class="mb-2">
                            <strong>Address:</strong> ${mainProperty.address}<br>
                            <strong>City:</strong> ${mainProperty.city}, ${mainProperty.state}<br>
                            ${mainProperty.price ? `<strong>Price:</strong> $${mainProperty.price.toLocaleString()}<br>` : ''}
                            ${mainProperty.sqft ? `<strong>Sqft:</strong> ${mainProperty.sqft.toLocaleString()} sqft<br>` : ''}
                            ${mainProperty.bedrooms || mainProperty.bathrooms ? `<strong>Bed/Bath:</strong> ${mainProperty.bedrooms || '?'} / ${mainProperty.bathrooms || '?'}` : ''}
                        </div>
                    </div>
                `;

                marker.bindPopup(popupContent);

                // Center the map on the main property
                comparableMap.setView([lat, lng], 15);

                console.log('Main property marker added successfully');
            } catch (error) {
                console.error('Error adding main property marker:', error);
                // Don't fail the whole map if we can't add the main property
            }
        }

        function addPropertyMarker(property) {
            const marker = L.marker([property.latitude, property.longitude]).addTo(comparableMap);

            // Create popup content with property details and Add button
            const popupContent = `
                <div style="min-width: 250px;">
                    <h6 class="fw-bold mb-2">${property.address || 'Unknown Address'}</h6>
                    <div class="mb-2">
                        <strong>Price:</strong> ${property.price ? '$' + property.price.toLocaleString() : 'N/A'}<br>
                        <strong>Sqft:</strong> ${property.livingArea ? property.livingArea.toLocaleString() + ' sqft' : 'N/A'}<br>
                        <strong>Bed/Bath:</strong> ${property.bedrooms || '?'} / ${property.bathrooms || '?'}<br>
                        <strong>Sold On:</strong> ${property.dateSold || "N/A"}
                    </div>
                    <button class="btn btn-sm btn-primary w-100" onclick="addAsComparable('${encodeProperty(property)}')">
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-plus-circle me-1" viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
                        </svg>
                        Add as Comparable
                    </button>
                </div>
            `;

            marker.bindPopup(popupContent);
        }

        function encodeProperty(property) {
            // Encode property data as base64 JSON for passing to function
            return btoa(JSON.stringify(property));
        }

        async function addAsComparable(encodedProperty) {
            const property = JSON.parse(atob(encodedProperty));
            console.log('Adding property as comparable:', property);

            // Convert Unix timestamp to ISO date string if present
            let saleDate = null;
            if (property.dateSold) {
                const date = new Date(property.dateSold);
                saleDate = date.toISOString();
            }

            // Parse address if needed (Zillow gives full address as single string)
            const addressParts = parseAddress(property.address);

            // Map ZillowProperty to CreateComparableDto
            const dto = {
                PropertyId: propertyId,
                SaleDate: saleDate,
                ListingStatus: mapListingStatus(property.listingStatus),
                Source: 'Zillow',
                Address: addressParts.street || property.address || '',
                City: addressParts.city || '',
                State: addressParts.state || '',
                ZipCode: addressParts.zip || '',
                Price: property.price,
                Sqft: property.livingArea,
                Bedrooms: property.bedrooms,
                Bathrooms: property.bathrooms ? Math.floor(property.bathrooms) : null,
                LotSizeSqft: null,
                YearBuilt: null
            };

            console.log('DTO to send:', dto);

            try {
                const response = await fetch('/Property/AddComparable', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(dto)
                });

                const result = await response.json();

                if (result.success) {
                    // Close the modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addComparableModal'));
                    modal.hide();

                    // Reload the page to show the new comparable
                    location.reload();
                } else {
                    alert('Error adding comparable: ' + (result.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error adding comparable:', error);
                alert('Failed to add comparable. Please try again.');
            }
        }

        function parseAddress(fullAddress) {
            if (!fullAddress) return { street: '', city: '', state: '', zip: '' };

            // Example: "9218 Success Ave, Los Angeles, CA 90002"
            const parts = fullAddress.split(',').map(p => p.trim());

            if (parts.length >= 3) {
                // Last part should have "STATE ZIP"
                const lastPart = parts[parts.length - 1];
                const stateZipMatch = lastPart.match(/([A-Z]{2})\s+(\d{5})/);

                return {
                    street: parts[0] || '',
                    city: parts[1] || '',
                    state: stateZipMatch ? stateZipMatch[1] : '',
                    zip: stateZipMatch ? stateZipMatch[2] : ''
                };
            }

            // If parsing fails, return the full address as street
            return {
                street: fullAddress,
                city: '',
                state: '',
                zip: ''
            };
        }

        function mapListingStatus(zillowStatus) {
            // Map Zillow listing status to our ListingStatuses enum
            // ListingStatuses: Sold, Pending, Listed, OffMarket
            if (!zillowStatus) return 0; // Sold (default)

            const status = zillowStatus.toLowerCase();
            if (status.includes('sold')) return 0; // Sold
            if (status.includes('pending')) return 1; // Pending
            if (status.includes('sale') || status.includes('listed')) return 2; // Listed
            return 3; // OffMarket
        }

        function showError(message) {
            const errorDiv = document.getElementById('error-message');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
        }

        async function saveCoordinatesToDatabase(latitude, longitude) {
            try {
                const response = await fetch('/Property/UpdateCoordinates', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        PropertyId: propertyId,
                        Latitude: latitude,
                        Longitude: longitude
                    })
                });

                const result = await response.json();
                if (result.success) {
                    console.log('Coordinates saved to database successfully');
                    // Update the mainProperty object so future loads don't need to geocode
                    mainProperty.latitude = latitude;
                    mainProperty.longitude = longitude;
                } else {
                    console.warn('Failed to save coordinates:', result.error);
                }
            } catch (error) {
                console.error('Error saving coordinates to database:', error);
                // Don't fail the map display if saving fails
            }
        }

        async function initializePropertyLocationMap() {
            try {
                let lat, lng;

                // Check if we already have coordinates stored
                if (mainProperty.latitude && mainProperty.longitude) {
                    lat = mainProperty.latitude;
                    lng = mainProperty.longitude;
                    console.log('Using stored coordinates for property location map');
                } else {
                    // Geocode the address
                    const fullAddress = `${mainProperty.address}, ${mainProperty.city}, ${mainProperty.state}`;
                    console.log('Geocoding property address for location map:', fullAddress);

                    const geocodeUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(fullAddress)}`;
                    const response = await fetch(geocodeUrl, {
                        headers: {
                            'User-Agent': 'DealEvaluator/1.0'
                        }
                    });

                    const results = await response.json();
                    if (results && results.length > 0) {
                        lat = parseFloat(results[0].lat);
                        lng = parseFloat(results[0].lon);
                        console.log('Geocoded property to:', lat, lng);

                        // Save coordinates to database for future use
                        await saveCoordinatesToDatabase(lat, lng);
                    } else {
                        console.warn('Could not geocode property address for location map');
                        // Hide the map card if geocoding fails
                        document.querySelector('.card:has(#property-location-map)').style.display = 'none';
                        return;
                    }
                }

                // Initialize the property location map
                propertyLocationMap = L.map('property-location-map').setView([lat, lng], 15);

                // Add CartoDB Positron tiles
                L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
                    maxZoom: 30
                }).addTo(propertyLocationMap);

                // Create custom red icon for main property
                const redIcon = L.icon({
                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    shadowSize: [41, 41]
                });

                // Add marker for property
                const marker = L.marker([lat, lng], { icon: redIcon }).addTo(propertyLocationMap);

                // Create popup content
                const popupContent = `
                    <div style="min-width: 250px;">
                        <h6 class="fw-bold mb-2 text-danger">📍 ${mainProperty.address}</h6>
                        <div class="mb-2">
                            <strong>City:</strong> ${mainProperty.city}, ${mainProperty.state}<br>
                            ${mainProperty.price ? `<strong>Price:</strong> $${mainProperty.price.toLocaleString()}<br>` : ''}
                            ${mainProperty.sqft ? `<strong>Sqft:</strong> ${mainProperty.sqft.toLocaleString()} sqft<br>` : ''}
                            ${mainProperty.bedrooms || mainProperty.bathrooms ? `<strong>Bed/Bath:</strong> ${mainProperty.bedrooms || '?'} / ${mainProperty.bathrooms || '?'}` : ''}
                        </div>
                    </div>
                `;

                marker.bindPopup(popupContent);

                console.log('Property location map initialized successfully');
            } catch (error) {
                console.error('Error initializing property location map:', error);
                // Hide the map card if there's an error
                const mapCard = document.querySelector('.card:has(#property-location-map)');
                if (mapCard) {
                    mapCard.style.display = 'none';
                }
            }
        }
    </script>
}